{"html":"<article><div class=\"content-top\"><\/div><div class=\"textblock\"><h1>Memory Manager<span id=\"memory-manager\" class=\"self-anchor\"><a class=\"perm\" href=\"#memory-manager\">#<\/a><\/span><\/h1><h3>Overview<span id=\"overview\" class=\"self-anchor\"><a class=\"perm\" href=\"#overview\">#<\/a><\/span><\/h3><p style=\"color:inherit\">The Memory Manager is a platform-level software module that provides different ways to perform runtime allocations, either one shot or dynamic. The Memory Manager complements the toolchain linker by managing the RAM memory not allocated/partitioned by the linker. It offers different constructs that will help the different Silicon Labs SDK software modules and your application to build, as much as possible, an efficient and optimized RAM layout. The main Memory Manager constructs will be:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">A dynamic allocation API<\/p><\/li><li><p style=\"color:inherit\">A memory pool API<\/p><\/li><li><p style=\"color:inherit\">A dynamic reservation API<\/p><\/li><\/ul><p style=\"color:inherit\">The Memory Manager can be used in an RTOS context as it is thread-safe by protecting adequately its internal shared resources.<\/p><h3>Initialization<span id=\"initialization\" class=\"self-anchor\"><a class=\"perm\" href=\"#initialization\">#<\/a><\/span><\/h3><p style=\"color:inherit\">The initialization part includes the following configuration files:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\"><strong>sl_memory_manager_region_config.h<\/strong><\/p><\/li><li><p style=\"color:inherit\"><strong>sl_memory_manager_config.h<\/strong><\/p><\/li><\/ul><p style=\"color:inherit\">These header files offer a few configurations for the Memory Manager. They use the CMSIS Configuration Wizard Annotations that can be rendered by Simplicity Studio to set graphically the configuration settings value.<\/p><p style=\"color:inherit\">The API function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-init\" target=\"_blank\" rel=\"\">sl_memory_init()<\/a> is used to initialize the Memory Manager module. This function must be called early during your initialization sequence. If the SL System component (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/system\" target=\"_blank\" rel=\"\">System Initialization and Action Processing<\/a>) is used by your application, the <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-init\" target=\"_blank\" rel=\"\">sl_memory_init()<\/a> call will be added automatically to your initialization sequence.<\/p><p style=\"color:inherit\"><strong>sl_memory_manager_region_config.h<\/strong> allows to configure the stack size for the application. The default value of 4096 bytes for SL_STACK_SIZE will be used by the linker to allocate a stack zone in the RAM. In a baremetal application, the stack size is bound to the value set by SL_STACK_SIZE. So you should carefully size the stack in that case. In an RTOS application, the stack size SL_STACK_SIZE will serve mainly for the code running in the main() context until the kernel is launched. Once the kernel is started, the different tasks' stacks, created upon tasks' creation, will allow to save the different contexts (that is task, function, ISR contexts). The main stack will be less active while the application's tasks are running.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">It is not possible to specify a minimum heap size via a configuration value in <strong>sl_memory_manager_region_config.h<\/strong>. The GCC and IAR linker files define a heap section in RAM that will be the last zone of the RAM partitioned by the toolchain linker. The size of this heap zone will be the remaining space of the RAM. If you need to perform some checks on the heap size, you should do it at runtime using the Memory Manager <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/group-memory-manager#group-memory-manager-1subsubsection-statistics\" target=\"_blank\" rel=\"\">statistics API<\/a>. You cannot do it during the toolchain preprocessor time.<\/p><\/li><\/ul><h3>Functionalities<span id=\"functionalities\" class=\"self-anchor\"><a class=\"perm\" href=\"#functionalities\">#<\/a><\/span><\/h3><p style=\"color:inherit\">The Memory Manager offers different functionalities such as:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Dynamically allocating and freeing blocks.<\/p><\/li><li><p style=\"color:inherit\">Creating and deleting memory pools. Allocating and freeing fixed-size blocks from a given pool.<\/p><\/li><li><p style=\"color:inherit\">Reserving and releasing blocks.<\/p><\/li><li><p style=\"color:inherit\">Getting statistics about the heap usage and the stack.<\/p><\/li><li><p style=\"color:inherit\">Retargeting the standard C library memory functions malloc()/free()/ calloc()/realloc() to the Memory Manager ones.<\/p><\/li><li><p style=\"color:inherit\">Overloading the C++ standard new/delete operators to the Memory Manager malloc()/free()<\/p><\/li><\/ul><h4>Dynamic Allocation<span id=\"dynamic-allocation\" class=\"self-anchor\"><a class=\"perm\" href=\"#dynamic-allocation\">#<\/a><\/span><\/h4><p style=\"color:inherit\">The dynamic allocation API allows to dynamically allocate and free memory blocks of various sizes. The API supports the classic signatures of memory functions malloc()/free()/calloc()/realloc() while also offering variants of the same functions.<\/p><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Operation<\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Standard-Like Function<\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Variant Function <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Allocating a block<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><ul style=\"list-style:\"><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a><\/p><\/li><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc-advanced\" target=\"_blank\" rel=\"\">sl_memory_alloc_advanced()<\/a><\/p><\/li><\/ul><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Freeing a block<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a><\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Allocating a block whose content is zero'ed<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-calloc\" target=\"_blank\" rel=\"\">sl_memory_calloc()<\/a><\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Re-allocating a block<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-realloc\" target=\"_blank\" rel=\"\">sl_memory_realloc()<\/a><\/p><\/td><\/tr><\/tbody><\/table><p style=\"color:inherit\">The variants functions <strong>sl_memory_xxxx()<\/strong> differs from the standard-like functions with the following:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">They return an error code of type <strong>sl_status_t<\/strong>. You may want to process any returned error code different from <strong>SL_STATUS_OK<\/strong>.<\/p><\/li><li><p style=\"color:inherit\">They allow to specify a block alignment requirement in bytes. The alignment can be any power-of-two values between 1 and 512 bytes inclusively. The default block alignment the Memory Manager will use is 8 bytes to maximize CPU accesses to allocated memory blocks.<\/p><\/li><li><p style=\"color:inherit\">They allow to specify a block type as long-term or short-term (further explained below). The Memory Manager allows to allocate a block from different ends of the heap to limit the fragmentation.<\/p><\/li><\/ul><p style=\"color:inherit\">Allocating a block can be done by specifying your requested size with the simple <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a>. If you have a special alignment requirement, the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc-advanced\" target=\"_blank\" rel=\"\">sl_memory_alloc_advanced()<\/a> is the one to use. The Memory Manager will use a first fit algorithm to find the block fitting the requested size. If the found block is too large, the allocator tries to split it to create a new free block from the unwanted portion of the found block. The block internal split operation helps to limit the internal fragmentation.<\/p><p style=\"color:inherit\">The dynamic allocation API allows to specify the block type as long-term (BLOCK_TYPE_LONG_TERM) or short-term (BLOCK_TYPE_SHORT_TERM) with the functions <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc-advanced\" target=\"_blank\" rel=\"\">sl_memory_alloc_advanced()<\/a>. The long-term (LT) allocations are allocated from the heap start, while short-term (ST) ones are allocated from the heap end. LT/ST allocations relate to the expected lifetime of the block allocation. LT blocks are used for the full duration of the application or for something that is expected to last a long time. For instance, a control data structure enabling the proper functioning of a stack's layer, a driver, a part of the application layer. ST blocks are used for something that is expected to be freed quite quickly. For example, a received buffer that needs to be processed and once processed will be freed. Grouping your allocations as LT blocks and/or ST blocks can help to limit the heap fragmentation. Certain functions does not allow to indicate the block type. In that case, a default type is selected by the allocator.<\/p><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Function<\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Block type <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term by default<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term or short-term<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc-advanced\" target=\"_blank\" rel=\"\">sl_memory_alloc_advanced()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term or short-term<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term by default<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-calloc\" target=\"_blank\" rel=\"\">sl_memory_calloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term or short-term<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term by default<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-realloc\" target=\"_blank\" rel=\"\">sl_memory_realloc()<\/a><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Long-term by default<\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><\/td><\/tr><\/tbody><\/table><p style=\"color:inherit\">Freeing a block is done by calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a>. <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a> returns an error code of type sl_status_t that you may want to test. Passing a NULL pointer to <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a> results in a neutral situation where the free() function will do nothing. If the same block is freed twice, the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a> will return an error. During the free operation, the function will try to merge adjacent blocks to the block that is being freed in order to limit the internal fragmentation. The adjacent blocks must, of course, not be in use to be merged.<\/p><p style=\"color:inherit\">If you want to get a block from the heap whose content has been initialized to zero to avoid any garbage values, the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-calloc\" target=\"_blank\" rel=\"\">sl_memory_calloc()<\/a> can be called.<\/p><p style=\"color:inherit\">If you need to reallocate a block, the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-realloc\" target=\"_blank\" rel=\"\">sl_memory_realloc()<\/a> should be called. Both versions allow to:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Extend the block with the requested size greater than the original size.<\/p><\/li><li><p style=\"color:inherit\">Reduce the block with the requested size smaller than the original size.<\/p><\/li><li><p style=\"color:inherit\">Extend a different block with the requested size greater than the original size.<\/p><\/li><\/ul><p style=\"color:inherit\">The block can be moved elsewhere in the heap if it is impossible to extend it in its current memory space. A reduced block will always stay in the original block space as the allocator does not need to provide a different block. The content of the reallocated memory block is preserved up to the lesser of the new and old sizes, even if the block is moved to a new location. If the new size is larger, the value of the newly allocated portion is indeterminate. Some combinations of input parameters when calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-realloc\" target=\"_blank\" rel=\"\">sl_memory_realloc()<\/a> will lead to the same behavior as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a> (cf. the <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a> or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-realloc\" target=\"_blank\" rel=\"\">sl_memory_realloc()<\/a> function description for more details about those combinations).<\/p><p style=\"color:inherit\">The following code snippet shows a basic block allocation and deallocation using the standard-like functions: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">uint8_t <span class=\"token operator\">*<\/span>ptr8<span class=\"token punctuation\">;<\/span>\n\nptr8 <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span>uint8_t <span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span><span class=\"token function\">sl_malloc<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">200<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token function\">memset<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0xAA<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token function\">sl_free<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\">This other code snippet shows the same basic block allocation and deallocation using the variant functions: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">uint8_t <span class=\"token operator\">*<\/span>ptr8<span class=\"token punctuation\">;<\/span>\nsl_status_t status<span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_alloc<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">,<\/span> BLOCK_TYPE_LONG_TERM<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span>void <span class=\"token operator\">*<\/span><span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token function\">memset<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0xBB<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_free<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><h4>Memory Pool<span id=\"memory-pool\" class=\"self-anchor\"><a class=\"perm\" href=\"#memory-pool\">#<\/a><\/span><\/h4><p style=\"color:inherit\">The memory pool API allows to:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Create a pool composed of N number of fixed-size blocks: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-create-pool\" target=\"_blank\" rel=\"\">sl_memory_create_pool()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Delete a pool: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-delete-pool\" target=\"_blank\" rel=\"\">sl_memory_delete_pool()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Get a block from the pool: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-alloc\" target=\"_blank\" rel=\"\">sl_memory_pool_alloc()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Free a pool's block: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-free\" target=\"_blank\" rel=\"\">sl_memory_pool_free()<\/a>.<\/p><\/li><\/ul><p style=\"color:inherit\">Memory pools are convenient if you want to ensure a sort of guaranteed quotas for some memory allocations situations. It is also more robust to unexpected allocations errors as opposed to the dynamic allocation API in which a block allocation can fail randomly if there is no free block to satisfy the requested size.<\/p><p style=\"color:inherit\">The memory pool API uses a pool handle. This handle is initialized when the pool is created with <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-create-pool\" target=\"_blank\" rel=\"\">sl_memory_create_pool()<\/a>. Then this handle is passed as an input parameter of the other functions. The handle can be allocated statically or dynamically. A static pool handle means the handle of type <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t{}<\/a> is a global variable for example. A dynamic pool handle means the handle is obtained from the heap itself by calling the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-handle-alloc\" target=\"_blank\" rel=\"\">sl_memory_pool_handle_alloc()<\/a>.The dynamic pool handle will be freed with a call to <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-handle-free\" target=\"_blank\" rel=\"\">sl_memory_pool_handle_free()<\/a>.<\/p><p style=\"color:inherit\">The following code snippet shows a typical memory pool API sequence using a static pool handle: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">uint8_t <span class=\"token operator\">*<\/span>ptr8<span class=\"token punctuation\">;<\/span>\nsl_status_t status<span class=\"token punctuation\">;<\/span>\nsl_memory_pool_t pool1_handle <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">// Create a pool of 15 blocks whose size is 100 bytes for each block.<\/span>\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_create_pool<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">15<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_pool_alloc<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">,<\/span> <span class=\"token punctuation\">(<\/span>void <span class=\"token operator\">*<\/span><span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token function\">memset<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0xCC<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">100<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_pool_free<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">,<\/span> ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_delete_pool<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><p style=\"color:inherit\">This other code snippet presents the previous typical memory pool API sequence using a dynamic pool handle: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">sl_status_t status<span class=\"token punctuation\">;<\/span>\nsl_memory_pool_t <span class=\"token operator\">*<\/span>pool1_handle <span class=\"token operator\">=<\/span> NULL<span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_pool_handle_alloc<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token comment\">// Create a pool of 15 blocks of 100 bytes in size.<\/span>\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_create_pool<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">100<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">15<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token comment\">// Get blocks from the pool, use them and free them once done.<\/span>\n<span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span><span class=\"token punctuation\">.<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_delete_pool<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_pool_handle_free<\/span><span class=\"token punctuation\">(<\/span>pool1_handle<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><h4>Dynamic Reservation<span id=\"dynamic-reservation\" class=\"self-anchor\"><a class=\"perm\" href=\"#dynamic-reservation\">#<\/a><\/span><\/h4><p style=\"color:inherit\">The dynamic reservation is a special construct allowing to reserve a block of a given size with <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-reserve-block\" target=\"_blank\" rel=\"\">sl_memory_reserve_block()<\/a> and to release it with <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-release-block\" target=\"_blank\" rel=\"\">sl_memory_release_block()<\/a>. The reserved block can then be used to any application purposes. The reserved block will be taken from the short-term section at the end of the heap. Please note that the dynamic reservation API is not meant to be used in the same way as the <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/group-memory-manager#group-memory-manager-1subsubsection-dynamic-allocation\" target=\"_blank\" rel=\"\">dynamic allocation API<\/a>.<\/p><p style=\"color:inherit\">The dynamic reservation API uses a reservation handle. This handle is initialized when the block is reserved with <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-reserve-block\" target=\"_blank\" rel=\"\">sl_memory_reserve_block()<\/a>. Then this handle is passed as an input parameter to the other functions. The handle can be allocated statically or dynamically. A static reservation handle means the handle of type <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t{}<\/a> is a global variable for example. A dynamic reservation handle means the handle is obtained from the heap itself by calling the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-reservation-handle-alloc\" target=\"_blank\" rel=\"\">sl_memory_reservation_handle_alloc()<\/a>. The dynamic reservaiton handle will be freed with a call to <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-reservation-handle-free\" target=\"_blank\" rel=\"\">sl_memory_reservation_handle_free()<\/a>.<\/p><p style=\"color:inherit\">The following code snippet shows a typical dynamic reservation API sequence using a static reservation handle: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">uint8_t <span class=\"token operator\">*<\/span>ptr8<span class=\"token punctuation\">;<\/span>\nsl_status_t status<span class=\"token punctuation\">;<\/span>\nsl_memory_reservation_t reservation_handle1 <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">{<\/span> <span class=\"token number\">0<\/span> <span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_reserve_block<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">1024<\/span><span class=\"token punctuation\">,<\/span>\n                                 SL_MEMORY_BLOCK_ALIGN_8_BYTES<span class=\"token punctuation\">,<\/span>\n                                 reservation_handle1<span class=\"token punctuation\">,<\/span>\n                                 <span class=\"token punctuation\">(<\/span>void <span class=\"token operator\">*<\/span><span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token function\">memset<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0xDD<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1024<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_release_block<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>reservation_handle1<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><p style=\"color:inherit\">This other code snippet demonstrates the previous typical dynamic reservation API sequence using a dynamic reservation handle: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">uint8_t <span class=\"token operator\">*<\/span>ptr8<span class=\"token punctuation\">;<\/span>\nsl_status_t status<span class=\"token punctuation\">;<\/span>\nsl_memory_reservation_t <span class=\"token operator\">*<\/span>reservation_handle1<span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_reservation_handle_alloc<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>reservation_handle1<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_reserve_block<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">1024<\/span><span class=\"token punctuation\">,<\/span>\n                                 SL_MEMORY_BLOCK_ALIGN_8_BYTES<span class=\"token punctuation\">,<\/span>\n                                 reservation_handle1<span class=\"token punctuation\">,<\/span>\n                                 <span class=\"token punctuation\">(<\/span>void <span class=\"token operator\">*<\/span><span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>ptr8<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n<span class=\"token function\">memset<\/span><span class=\"token punctuation\">(<\/span>ptr8<span class=\"token punctuation\">,<\/span> <span class=\"token number\">0xEE<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1024<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_release_block<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>reservation_handle1<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nstatus <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_memory_reservation_handle_free<\/span><span class=\"token punctuation\">(<\/span>reservation_handle1<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">// Process the error condition.<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><h4>Statistics<span id=\"statistics\" class=\"self-anchor\"><a class=\"perm\" href=\"#statistics\">#<\/a><\/span><\/h4><p style=\"color:inherit\">As your code is allocating and freeing blocks, you may want to know at a certain instant what the current state of the heap is. Some heap statistics queries at runtime can help to understand the current usage of the heap. By using the following statistics functions, you may be able to perform some asynchronous runtime heap checks:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Total heap size: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-total-heap-size\" target=\"_blank\" rel=\"\">sl_memory_get_total_heap_size()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Current free heap size: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-free-heap-size\" target=\"_blank\" rel=\"\">sl_memory_get_free_heap_size()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Current used heap size: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-used-heap-size\" target=\"_blank\" rel=\"\">sl_memory_get_used_heap_size()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">Highest accumulated heap size usage: <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-heap-high-watermark\" target=\"_blank\" rel=\"\">sl_memory_get_heap_high_watermark()<\/a>.<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">You can reset the high heap usage watermark with <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-reset-heap-high-watermark\" target=\"_blank\" rel=\"\">sl_memory_reset_heap_high_watermark()<\/a>.<\/p><\/li><\/ul><\/li><\/ul><p style=\"color:inherit\">Besides a few functions each dedicated to a specific statistic, the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-heap-info\" target=\"_blank\" rel=\"\">sl_memory_get_heap_info()<\/a> allows to get a general heap information structure of type <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t{}<\/a> with several heap statistics. Some of them overlap the statistics returned by the dedicated functions while the others complements statistics returned by the dedicated functions. Refer to the description of <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t{}<\/a> for more information of each field.<\/p><p style=\"color:inherit\">If you want to know the start address and the total size of the program's stack and/or heap, simply call respectively the function <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-stack-region\" target=\"_blank\" rel=\"\">sl_memory_get_stack_region()<\/a> and/or <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-get-heap-region\" target=\"_blank\" rel=\"\">sl_memory_get_heap_region()<\/a>.<\/p><h4>C/C++ Toolchains Standard Memory Functions Retarget/Overload<span id=\"c-c-toolchains-standard-memory-functions-retarget-overload\" class=\"self-anchor\"><a class=\"perm\" href=\"#c-c-toolchains-standard-memory-functions-retarget-overload\">#<\/a><\/span><\/h4><p style=\"color:inherit\">A program can perform dynamic memory allocations and deallocations using the standard memory functions whose implementation is provided by the C or C++ toolchain libraries.<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">C toolchain for the classic malloc()/free()/calloc()/realloc()<\/p><\/li><li><p style=\"color:inherit\">C++ toolchain for the new/delete operators<\/p><\/li><\/ul><p style=\"color:inherit\">The Memory Manager supports the C standard memory functions retarget and the C++ new/delete overload.<\/p><p style=\"color:inherit\">When the <strong>memory_manager<\/strong> component is installed, the C standard memory functions are automatically retargeted to the Memory Manager ones:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">GCC: coupled to the linker option \"--wrap\", the functions retargeted are<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">standard _malloc_r() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard _free_r() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard _calloc_r() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard _realloc_r() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a><\/p><\/li><\/ul><\/li><li><p style=\"color:inherit\">IAR: it has three separate heap memory handlers (the basic, the advanced, and the no-free heap handlers). IAR generally auto-selects one of the handlers.<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Basic heap<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">standard __basic_malloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __basic_free() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __basic_calloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __basic_realloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a><\/p><\/li><\/ul><\/li><li><p style=\"color:inherit\">Advanced heap<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">standard __iar_dl_malloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __iar_dl_free() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __iar_dl_calloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __iar_dl_realloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-realloc\" target=\"_blank\" rel=\"\">sl_realloc()<\/a><\/p><\/li><\/ul><\/li><li><p style=\"color:inherit\">No Free heap<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">standard __no_free_malloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a><\/p><\/li><li><p style=\"color:inherit\">standard __no_free_calloc() -&gt; <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-calloc\" target=\"_blank\" rel=\"\">sl_calloc()<\/a><\/p><\/li><\/ul><\/li><\/ul><\/li><\/ul><p style=\"color:inherit\">If you need the C++ new/delete global overload calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a>, please install the additional component <strong>memory_manager_cpp<\/strong>. This global overload of new/delete operators will also apply to any C++ standard containers (for example vector, string, list).<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">The Silicon Labs SDK generates a GCC or IAR linker script with Simplicity Studio. A typical toolchain linker script will define a section called \"heap\" or \"HEAP\". Usually, the C memory standard functions will assume a linker-defined \"heap\" section exists. If the memory_manager component is present, the toolchain linker script will define a new heap section named \"memory_manager_heap\" or \"MEMORY_MANAGER_HEAP\". Since the Memory Manager retargets the standard function malloc()/free()/calloc()/realloc() to the Memory Manager ones, there should not be any issues in your program. If an unlikely situation occurs where the toolchain standard memory functions retarget does not work, your application might end up calling a standard malloc() implementation from the toolchain instead of the Memory Manager one. In that case, a runtime error can occur and it is expected. You should then review the project settings to detect why the Memory Manager retarget did not work properly.<\/p><\/li><\/ul><h3>Hints<span id=\"hints\" class=\"self-anchor\"><a class=\"perm\" href=\"#hints\">#<\/a><\/span><\/h3><h4>Memory Allocations from ISR<span id=\"memory-allocations-from-isr\" class=\"self-anchor\"><a class=\"perm\" href=\"#memory-allocations-from-isr\">#<\/a><\/span><\/h4><p style=\"color:inherit\">In general, ISR must be kept short. Allocating and freeing blocks from an ISR is possible but you should be careful. Nothing really prevents you from calling the dynamic allocation API functions such as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a>. But keep in mind a few things with the dynamic allocation API:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">The dynamic allocation API functions protect their internal resources such as global lists managing the heap metadata by using critical sections. So when in your ISR, you will disable interrupts for a certain period of time, preventing other interrupts to be processed in time if your application has hard real-time constraints. This increases the overall interrupt latency of your system if this ISR executes very often to perform a dynamic memory operation<\/p><\/li><li><p style=\"color:inherit\">They can introduce non-deterministic behavior which is undesirable if your application requires crucial precise timing<\/p><\/li><li><p style=\"color:inherit\">A function such as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a> can fail if there is no block to satisfy your requested size allocation. Implementing the proper error handling in the ISR may increase the time spent in the ISR.<\/p><\/li><\/ul><p style=\"color:inherit\">In the end, it really depends of your ISR processing context doing memory allocations/deallocations. If you really need to perform dynamic allocation from ISR, it may be better at least to use a memory pool. Getting and releasing a block from a pool is an operation more deterministic. And if you have properly sized your pool with a number of available blocks, you are less likely to encounter an allocation error. <\/p><h2>Modules<span id=\"modules\" class=\"self-anchor\"><a class=\"perm\" href=\"#modules\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-region-t\" target=\"_blank\" rel=\"\">sl_memory_region_t<\/a><\/p><div class=\"decl-class-section\"><h2>Enumerations<span id=\"enum-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-block-type-t\">sl_memory_block_type_t<\/a> {<\/div><div class=\"enum\">BLOCK_TYPE_LONG_TERM = 0<\/div><div class=\"enum\">BLOCK_TYPE_SHORT_TERM = 1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Block type. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-init\">sl_memory_init<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initializes the memory manager. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reserve-no-retention\">sl_memory_reserve_no_retention<\/a>(size_t size, size_t align, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Reserves a memory block that will never need retention in EM2. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void *<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-malloc\">sl_malloc<\/a>(size_t size)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Allocates a memory block of at least requested size from the heap. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-alloc\">sl_memory_alloc<\/a>(size_t size, sl_memory_block_type_t type, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a block of memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-alloc-advanced\">sl_memory_alloc_advanced<\/a>(size_t size, size_t align, sl_memory_block_type_t type, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a block of memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-free\">sl_free<\/a>(void *ptr)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a previously allocated block back into the heap. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-free\">sl_memory_free<\/a>(void *block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a dynamically allocated block of memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void *<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-calloc\">sl_calloc<\/a>(size_t item_count, size_t size)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a block of memory cleared to 0. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-calloc\">sl_memory_calloc<\/a>(size_t item_count, size_t size, sl_memory_block_type_t type, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a block of memory cleared to 0. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void *<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-realloc\">sl_realloc<\/a>(void *ptr, size_t size)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Resizes a previously allocated memory block. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-realloc\">sl_memory_realloc<\/a>(void *ptr, size_t size, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Resizes a previously allocated memory block. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reserve-block\">sl_memory_reserve_block<\/a>(size_t size, size_t align, sl_memory_reservation_t *handle, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically reserves a block of memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-release-block\">sl_memory_release_block<\/a>(sl_memory_reservation_t *handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a dynamically reserved block of memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reservation-handle-alloc\">sl_memory_reservation_handle_alloc<\/a>(sl_memory_reservation_t **handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a block reservation handle. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reservation-handle-free\">sl_memory_reservation_handle_free<\/a>(sl_memory_reservation_t *handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a dynamically allocated block reservation handle. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reservation-handle-get-size\">sl_memory_reservation_handle_get_size<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the size of the memory reservation handle structure. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-create-pool\">sl_memory_create_pool<\/a>(size_t block_size, uint32_t block_count, sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Creates a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-delete-pool\">sl_memory_delete_pool<\/a>(sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Deletes a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-alloc\">sl_memory_pool_alloc<\/a>(sl_memory_pool_t *pool_handle, void **block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Allocates a block from a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-free\">sl_memory_pool_free<\/a>(sl_memory_pool_t *pool_handle, void *block)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a block from a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-handle-alloc\">sl_memory_pool_handle_alloc<\/a>(sl_memory_pool_t **pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Dynamically allocates a memory pool handle. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-handle-free\">sl_memory_pool_handle_free<\/a>(sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Frees a dynamically allocated memory pool handle. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-handle-get-size\">sl_memory_pool_handle_get_size<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the size of the memory pool handle structure. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-get-total-block-count\">sl_memory_pool_get_total_block_count<\/a>(const sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the total count of blocks in a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-get-free-block-count\">sl_memory_pool_get_free_block_count<\/a>(const sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the count of free blocks in a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-pool-get-used-block-count\">sl_memory_pool_get_used_block_count<\/a>(const sl_memory_pool_t *pool_handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the count of used blocks in a memory pool. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-heap-info\">sl_memory_get_heap_info<\/a>(sl_memory_heap_info_t *heap_info)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Populates an <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t<\/a>{} structure with the current status of the heap. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">size_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-total-heap-size\">sl_memory_get_total_heap_size<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the total size of the heap. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">size_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-free-heap-size\">sl_memory_get_free_heap_size<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the current free heap size. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">size_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-used-heap-size\">sl_memory_get_used_heap_size<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the current used heap size. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">size_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-heap-high-watermark\">sl_memory_get_heap_high_watermark<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets heap high watermark. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-reset-heap-high-watermark\">sl_memory_reset_heap_high_watermark<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Reset heap high watermark to the current heap used. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-region-t\" target=\"_blank\" rel=\"\">sl_memory_region_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-stack-region\">sl_memory_get_stack_region<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets size and location of the stack. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-region-t\" target=\"_blank\" rel=\"\">sl_memory_region_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-memory-get-heap-region\">sl_memory_get_heap_region<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets size and location of the heap. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Macros<span id=\"define-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_DEFAULT 0xFFFFFFFFU<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Special value to indicate the default block alignment to the Memory Manager allocator. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_8_BYTES 8U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Pre-defined values for block alignment managed by the Memory Manager allocator. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_16_BYTES 16U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">16 bytes alignment. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_32_BYTES 32U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">32 bytes alignment. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_64_BYTES 64U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">64 bytes alignment. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_128_BYTES 128U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">128 bytes alignment. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_256_BYTES 256U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">256 bytes alignment. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">SL_MEMORY_BLOCK_ALIGN_512_BYTES 512U<\/div><div class=\"classdescription\"><p style=\"color:inherit\">512 bytes alignment. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Enumeration Documentation<span id=\"enum-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-definition\">#<\/a><\/span><\/h2><div><h3>sl_memory_block_type_t<span id=\"sl-memory-block-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-block-type-t\">#<\/a><\/span><\/h3><blockquote>sl_memory_block_type_t<\/blockquote><p style=\"color:inherit\">Block type. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">BLOCK_TYPE_LONG_TERM<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">Long-term block type. <\/p><\/td><\/tr><tr><td class=\"fieldname\">BLOCK_TYPE_SHORT_TERM<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">Short-term block type. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>532<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>sl_memory_init<span id=\"sl-memory-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-init\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_init (void )<\/blockquote><p style=\"color:inherit\">Initializes the memory manager. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">This function should only be called once. <\/p><\/li><\/ul><br><div>Definition at line <code>579<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reserve_no_retention<span id=\"sl-memory-reserve-no-retention\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reserve-no-retention\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_reserve_no_retention (size_t size, size_t align, void ** block)<\/blockquote><p style=\"color:inherit\">Reserves a memory block that will never need retention in EM2. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the block, in bytes. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">align<\/td><td><p style=\"color:inherit\">Required alignment for the block, in bytes. <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Required alignment of memory block (in bytes) MUST be a power of 2 and can range from 1 to 512 bytes. The define SL_MEMORY_BLOCK_ALIGN_DEFAULT can be specified to select the default alignment. <\/p><\/li><\/ul><br><div>Definition at line <code>596<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_malloc<span id=\"sl-malloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-malloc\">#<\/a><\/span><\/h3><blockquote>void * sl_malloc (size_t size)<\/blockquote><p style=\"color:inherit\">Allocates a memory block of at least requested size from the heap. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the block, in bytes.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Simple version.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Pointer to allocated block if successful. Null pointer if allocation failed.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Requesting a block of 0 byte will return a null pointer.<\/p><\/li><li><p style=\"color:inherit\">All allocated blocks using this function will be considered long-term allocations. <\/p><\/li><\/ul><br><div>Definition at line <code>614<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_alloc<span id=\"sl-memory-alloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-alloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_alloc (size_t size, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a> type, void ** block)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a block of memory. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the block, in bytes. <\/p><\/td><\/tr><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a><\/td><td>[in]<\/td><td class=\"paramname\">type<\/td><td><p style=\"color:inherit\">Type of block (long-term or short-term). BLOCK_TYPE_LONG_TERM BLOCK_TYPE_SHORT_TERM <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>628<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_alloc_advanced<span id=\"sl-memory-alloc-advanced\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-alloc-advanced\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_alloc_advanced (size_t size, size_t align, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a> type, void ** block)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a block of memory. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the block, in bytes. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">align<\/td><td><p style=\"color:inherit\">Required alignment for the block, in bytes. <\/p><\/td><\/tr><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a><\/td><td>[in]<\/td><td class=\"paramname\">type<\/td><td><p style=\"color:inherit\">Type of block (long-term or short term). BLOCK_TYPE_LONG_TERM BLOCK_TYPE_SHORT_TERM <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Advanced version that allows to specify alignment.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Required alignment of memory block (in bytes) MUST be a power of 2 and can range from 1 to 512 bytes. The define SL_MEMORY_BLOCK_ALIGN_DEFAULT can be specified to select the default alignment. <\/p><\/li><\/ul><br><div>Definition at line <code>651<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_free<span id=\"sl-free\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-free\">#<\/a><\/span><\/h3><blockquote>void sl_free (void * ptr)<\/blockquote><p style=\"color:inherit\">Frees a previously allocated block back into the heap. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void *<\/td><td>[in]<\/td><td class=\"paramname\">ptr<\/td><td><p style=\"color:inherit\">Pointer to memory block to be freed.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Simple version.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Passing a null pointer does nothing. <\/p><\/li><\/ul><br><div>Definition at line <code>663<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_free<span id=\"sl-memory-free\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-free\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_free (void * block)<\/blockquote><p style=\"color:inherit\">Frees a dynamically allocated block of memory. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void *<\/td><td>[in]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to the block that must be freed.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>672<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_calloc<span id=\"sl-calloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-calloc\">#<\/a><\/span><\/h3><blockquote>void * sl_calloc (size_t item_count, size_t size)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a block of memory cleared to 0. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">item_count<\/td><td><p style=\"color:inherit\">Number of elements to be allocated. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of each elements, in bytes.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Simple version.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Pointer to allocated block if successful. Null pointer if allocation failed.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">All allocated blocks using this function will be considered long-term allocations. <\/p><\/li><\/ul><br><div>Definition at line <code>686<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_calloc<span id=\"sl-memory-calloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-calloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_calloc (size_t item_count, size_t size, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a> type, void ** block)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a block of memory cleared to 0. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">item_count<\/td><td><p style=\"color:inherit\">Number of elements to be allocated. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of each elements, in bytes. <\/p><\/td><\/tr><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-block-type-t\" target=\"_blank\" rel=\"\">sl_memory_block_type_t<\/a><\/td><td>[in]<\/td><td class=\"paramname\">type<\/td><td><p style=\"color:inherit\">Type of block (long-term or short-term). BLOCK_TYPE_LONG_TERM BLOCK_TYPE_SHORT_TERM <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>703<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_realloc<span id=\"sl-realloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-realloc\">#<\/a><\/span><\/h3><blockquote>void * sl_realloc (void * ptr, size_t size)<\/blockquote><p style=\"color:inherit\">Resizes a previously allocated memory block. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void *<\/td><td>[in]<\/td><td class=\"paramname\">ptr<\/td><td><p style=\"color:inherit\">Pointer to the allocation to resize. If NULL, behavior is same as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a>. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">New size of the block, in bytes. If 0, behavior is same as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a>.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Simple version.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Pointer to newly allocated block, if successful. Null pointer if re-allocation failed.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">All re-allocated blocks using this function will be considered long-term allocations.<\/p><\/li><li><p style=\"color:inherit\">'ptr' NULL and 'size' of 0 bytes is an incorrect parameters combination. No reallocation will be done by the function as it is an error condition.<\/p><\/li><li><p style=\"color:inherit\">If the new 'size' is the same as the old, the function changes nothing and returns the same provided address 'ptr'. <\/p><\/li><\/ul><br><div>Definition at line <code>729<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_realloc<span id=\"sl-memory-realloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-realloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_realloc (void * ptr, size_t size, void ** block)<\/blockquote><p style=\"color:inherit\">Resizes a previously allocated memory block. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void *<\/td><td>[in]<\/td><td class=\"paramname\">ptr<\/td><td><p style=\"color:inherit\">Pointer to the allocation to resize. If NULL, behavior is same as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-malloc\" target=\"_blank\" rel=\"\">sl_malloc()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-alloc\" target=\"_blank\" rel=\"\">sl_memory_alloc()<\/a>. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">New size of the block, in bytes. If 0, behavior is same as <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-free\" target=\"_blank\" rel=\"\">sl_free()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-free\" target=\"_blank\" rel=\"\">sl_memory_free()<\/a>. <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the new allocated memory. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">All re-allocated blocks using this function will be considered long-term allocations.<\/p><\/li><li><p style=\"color:inherit\">'ptr' NULL and 'size' of 0 bytes is an incorrect parameters combination. No reallocation will be done by the function as it is an error condition.<\/p><\/li><li><p style=\"color:inherit\">If the new 'size' is the same as the old, the function changes nothing and returns the same provided address 'ptr'. <\/p><\/li><\/ul><br><div>Definition at line <code>754<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reserve_block<span id=\"sl-memory-reserve-block\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reserve-block\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_reserve_block (size_t size, size_t align, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> * handle, void ** block)<\/blockquote><p style=\"color:inherit\">Dynamically reserves a block of memory. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the block, in bytes. <\/p><\/td><\/tr><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">align<\/td><td><p style=\"color:inherit\">Required alignment for the block, in bytes. <\/p><\/td><\/tr><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Handle to the reserved block. <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to variable that will receive the start address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Required alignment of memory block (in bytes) MUST be a power of 2 and can range from 1 to 512 bytes. The define SL_MEMORY_BLOCK_ALIGN_DEFAULT can be specified to select the default alignment. <\/p><\/li><\/ul><br><div>Definition at line <code>774<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_release_block<span id=\"sl-memory-release-block\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-release-block\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_release_block (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> * handle)<\/blockquote><p style=\"color:inherit\">Frees a dynamically reserved block of memory. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Handle to the reserved block.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>786<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reservation_handle_alloc<span id=\"sl-memory-reservation-handle-alloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reservation-handle-alloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_reservation_handle_alloc (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> ** handle)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a block reservation handle. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> **<\/td><td>[out]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Handle to the reserved block.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>795<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reservation_handle_free<span id=\"sl-memory-reservation-handle-free\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reservation-handle-free\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_reservation_handle_free (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> * handle)<\/blockquote><p style=\"color:inherit\">Frees a dynamically allocated block reservation handle. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-reservation-t\" target=\"_blank\" rel=\"\">sl_memory_reservation_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Handle to the reserved block.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>804<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reservation_handle_get_size<span id=\"sl-memory-reservation-handle-get-size\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reservation-handle-get-size\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_memory_reservation_handle_get_size (void )<\/blockquote><p style=\"color:inherit\">Gets the size of the memory reservation handle structure. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Memory reservation handle structure's size in bytes. <\/p><\/li><\/ul><br><div>Definition at line <code>811<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_create_pool<span id=\"sl-memory-create-pool\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-create-pool\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_create_pool (size_t block_size, uint32_t block_count, <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Creates a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">block_size<\/td><td><p style=\"color:inherit\">Size of each block, in bytes. <\/p><\/td><\/tr><tr><td>uint32_t<\/td><td>[in]<\/td><td class=\"paramname\">block_count<\/td><td><p style=\"color:inherit\">Number of blocks in the pool. <\/p><\/td><\/tr><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">This function assumes the 'pool_handle' is provided by the caller:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">either statically (e.g. as a global variable)<\/p><\/li><li><p style=\"color:inherit\">or dynamically by calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-handle-alloc\" target=\"_blank\" rel=\"\">sl_memory_pool_handle_alloc()<\/a>.<\/p><\/li><\/ul><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>826<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_delete_pool<span id=\"sl-memory-delete-pool\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-delete-pool\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_delete_pool (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Deletes a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">All pool allocations need to be freed by calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-pool-free\" target=\"_blank\" rel=\"\">sl_memory_pool_free()<\/a> on each block before calling <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-delete-pool\" target=\"_blank\" rel=\"\">sl_memory_delete_pool()<\/a>.<\/p><\/li><li><p style=\"color:inherit\">The pool_handle provided is neither freed or invalidated. It can be reused in a new call to <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager#sl-memory-create-pool\" target=\"_blank\" rel=\"\">sl_memory_create_pool()<\/a> to create another pool. <\/p><\/li><\/ul><br><div>Definition at line <code>843<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_alloc<span id=\"sl-memory-pool-alloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-alloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_pool_alloc (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle, void ** block)<\/blockquote><p style=\"color:inherit\">Allocates a block from a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool. <\/p><\/td><\/tr><tr><td>void **<\/td><td>[out]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to a variable that will receive the address of the allocated block. NULL in case of error condition.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>855<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_free<span id=\"sl-memory-pool-free\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-free\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_pool_free (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle, void * block)<\/blockquote><p style=\"color:inherit\">Frees a block from a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool. <\/p><\/td><\/tr><tr><td>void *<\/td><td>[in]<\/td><td class=\"paramname\">block<\/td><td><p style=\"color:inherit\">Pointer to the block to free.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>866<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_handle_alloc<span id=\"sl-memory-pool-handle-alloc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-handle-alloc\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_pool_handle_alloc (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> ** pool_handle)<\/blockquote><p style=\"color:inherit\">Dynamically allocates a memory pool handle. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> **<\/td><td>[out]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>876<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_handle_free<span id=\"sl-memory-pool-handle-free\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-handle-free\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_pool_handle_free (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Frees a dynamically allocated memory pool handle. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>885<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_handle_get_size<span id=\"sl-memory-pool-handle-get-size\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-handle-get-size\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_memory_pool_handle_get_size (void )<\/blockquote><p style=\"color:inherit\">Gets the size of the memory pool handle structure. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Memory pool handle structure's size. <\/p><\/li><\/ul><br><div>Definition at line <code>892<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_get_total_block_count<span id=\"sl-memory-pool-get-total-block-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-get-total-block-count\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_memory_pool_get_total_block_count (const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Gets the total count of blocks in a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Total number of blocks. <\/p><\/li><\/ul><br><div>Definition at line <code>901<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_get_free_block_count<span id=\"sl-memory-pool-get-free-block-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-get-free-block-count\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_memory_pool_get_free_block_count (const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Gets the count of free blocks in a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Number of free blocks. <\/p><\/li><\/ul><br><div>Definition at line <code>910<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_pool_get_used_block_count<span id=\"sl-memory-pool-get-used-block-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-pool-get-used-block-count\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_memory_pool_get_used_block_count (const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> * pool_handle)<\/blockquote><p style=\"color:inherit\">Gets the count of used blocks in a memory pool. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>const <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-pool-t\" target=\"_blank\" rel=\"\">sl_memory_pool_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">pool_handle<\/td><td><p style=\"color:inherit\">Handle to the memory pool.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Number of used blocks. <\/p><\/li><\/ul><br><div>Definition at line <code>919<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_heap_info<span id=\"sl-memory-get-heap-info\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-heap-info\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_memory_get_heap_info (<a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t<\/a> * heap_info)<\/blockquote><p style=\"color:inherit\">Populates an <a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t<\/a>{} structure with the current status of the heap. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/sl-memory-heap-info-t\" target=\"_blank\" rel=\"\">sl_memory_heap_info_t<\/a> *<\/td><td>[in]<\/td><td class=\"paramname\">heap_info<\/td><td><p style=\"color:inherit\">Pointer to structure that will receive further heap information data.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>930<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_total_heap_size<span id=\"sl-memory-get-total-heap-size\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-total-heap-size\">#<\/a><\/span><\/h3><blockquote>size_t sl_memory_get_total_heap_size (void )<\/blockquote><p style=\"color:inherit\">Gets the total size of the heap. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Heap's size in bytes. <\/p><\/li><\/ul><br><div>Definition at line <code>937<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_free_heap_size<span id=\"sl-memory-get-free-heap-size\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-free-heap-size\">#<\/a><\/span><\/h3><blockquote>size_t sl_memory_get_free_heap_size (void )<\/blockquote><p style=\"color:inherit\">Gets the current free heap size. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Free heap size in bytes. <\/p><\/li><\/ul><br><div>Definition at line <code>944<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_used_heap_size<span id=\"sl-memory-get-used-heap-size\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-used-heap-size\">#<\/a><\/span><\/h3><blockquote>size_t sl_memory_get_used_heap_size (void )<\/blockquote><p style=\"color:inherit\">Gets the current used heap size. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Used heap size in bytes. <\/p><\/li><\/ul><br><div>Definition at line <code>951<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_heap_high_watermark<span id=\"sl-memory-get-heap-high-watermark\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-heap-high-watermark\">#<\/a><\/span><\/h3><blockquote>size_t sl_memory_get_heap_high_watermark (void )<\/blockquote><p style=\"color:inherit\">Gets heap high watermark. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">Highest heap usage in bytes recorded. <\/p><\/li><\/ul><br><div>Definition at line <code>958<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_reset_heap_high_watermark<span id=\"sl-memory-reset-heap-high-watermark\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-reset-heap-high-watermark\">#<\/a><\/span><\/h3><blockquote>void sl_memory_reset_heap_high_watermark (void )<\/blockquote><p style=\"color:inherit\">Reset heap high watermark to the current heap used. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>963<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_stack_region<span id=\"sl-memory-get-stack-region\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-stack-region\">#<\/a><\/span><\/h3><blockquote>sl_memory_region_t sl_memory_get_stack_region (void )<\/blockquote><p style=\"color:inherit\">Gets size and location of the stack. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">description of the region reserved for the C stack. <\/p><\/li><\/ul><br><div>Definition at line <code>62<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager_region.h<\/code><\/div><br><\/div><div><h3>sl_memory_get_heap_region<span id=\"sl-memory-get-heap-region\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-memory-get-heap-region\">#<\/a><\/span><\/h3><blockquote>sl_memory_region_t sl_memory_get_heap_region (void )<\/blockquote><p style=\"color:inherit\">Gets size and location of the heap. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>void<\/td><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">description of the region reserved for the C heap. <\/p><\/li><\/ul><br><div>Definition at line <code>69<\/code> of file <code>platform/service/memory_manager/inc/sl_memory_manager_region.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2><\/h2><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div class=\"light_theme hidden-lg\" ub-in-page=\"634f96f53042a864e44b82f8\"><\/div><div class=\"dark_theme hidden-lg\" ub-in-page=\"6735652b86eaf07b7012c67e\"><\/div>","url":"http://docs.silabs.com/gecko-platform/5.1.0/platform-service/memory-manager","status":"success"}
